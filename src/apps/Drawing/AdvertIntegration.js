import React, {PureComponent} from 'react';
import PropTypes from 'prop-types';
import {Button} from "@vkontakte/vkui";
import {
    getRandomInt,
    getSrcUrl,
    isPlatformDesktop, openUrl
} from "../../js/utils";

const isDesktop = isPlatformDesktop();

export const currentAdSettings = {
    id: 'opros_startgame_rsv',
    panel: 'ad_startgame',
    condition: () => Date.now() < 1693083600000 // Sun Aug 27 2023 00:00:00 GMT+0300 (Москва, стандартное время)
};
// ['alabuga_test', 'ad_alabuga', (data) => data.show < 100000];

const AdvertMark = <svg className='AdvertMark' width="56" height="39" viewBox="0 0 56 39" fill="none"
                        xmlns="http://www.w3.org/2000/svg">
    <g clip-path="url(#clip0_2343_2785)">
        <path
            d="M9.0771 14.6397C8.84392 14.7317 8.58382 14.7107 8.29678 14.5769C8.00973 14.443 7.82507 14.2566 7.74278 14.0175C7.66334 13.7798 7.69385 13.5103 7.83433 13.2091L9.8699 8.84377C10.0104 8.54251 10.1972 8.34591 10.4304 8.25397C10.6664 8.16334 10.9279 8.18496 11.215 8.31881L13.1205 9.20738C13.8083 9.52809 14.2663 9.98906 14.4946 10.5903C14.7257 11.1928 14.6822 11.8351 14.3641 12.5172C14.0501 13.1908 13.5766 13.6274 12.9437 13.827C12.3109 14.0267 11.6335 13.9582 10.9116 13.6216L10.0334 13.2121L9.64184 14.0519C9.50136 14.3532 9.31311 14.5491 9.0771 14.6397ZM10.6556 11.8778L11.1629 12.1144C11.467 12.2562 11.738 12.2908 11.976 12.2184C12.2152 12.1431 12.4024 11.9605 12.5376 11.6707C12.6714 11.3836 12.6896 11.1257 12.5922 10.8969C12.4989 10.6665 12.3031 10.4818 12.0047 10.3427L11.4846 10.1001L10.6556 11.8778ZM15.3215 17.8681C14.5513 17.509 14.0495 17.012 13.8161 16.3773C13.5841 15.7397 13.6463 15.0387 14.0028 14.2742C14.3619 13.504 14.8615 12.9965 15.5016 12.7518C16.1429 12.5042 16.8331 12.5526 17.572 12.8972C18.291 13.2325 18.7747 13.7089 19.023 14.3264C19.2727 14.9411 19.2478 15.5695 18.9483 16.2118C18.8502 16.4221 18.7171 16.5555 18.5489 16.612C18.3807 16.6685 18.1886 16.6464 17.9726 16.5457L15.5256 15.4047L15.4739 15.5155C15.3666 15.7457 15.3531 15.9713 15.4335 16.1921C15.5152 16.4101 15.6726 16.5735 15.9056 16.6822C16.0961 16.7709 16.2797 16.8185 16.4567 16.8249C16.6365 16.8326 16.8446 16.8017 17.0812 16.7321C17.2093 16.6949 17.319 16.6786 17.4103 16.6831C17.5058 16.6861 17.6075 16.7128 17.7155 16.7632C17.8917 16.8453 18.0171 16.9696 18.0918 17.1359C18.1665 17.3022 18.1621 17.4749 18.0786 17.6539C18.0163 17.7875 17.9183 17.8975 17.7846 17.9839C17.5064 18.1725 17.1453 18.2567 16.7015 18.2366C16.2618 18.2149 15.8018 18.0921 15.3215 17.8681ZM15.9925 14.4702L17.459 15.154C17.5428 14.9371 17.5457 14.7343 17.4676 14.5457C17.3937 14.3555 17.2544 14.2127 17.0498 14.1173C16.8508 14.0245 16.6527 14.0117 16.4553 14.0788C16.2579 14.1459 16.1037 14.2764 15.9925 14.4702ZM19.7775 19.645C19.554 19.7311 19.303 19.7092 19.0244 19.5793C18.7459 19.4494 18.5664 19.2705 18.4858 19.0427C18.4094 18.8133 18.4381 18.5551 18.572 18.268L20.0231 15.156C20.157 14.869 20.3356 14.6824 20.5592 14.5964C20.7868 14.5088 21.0399 14.5299 21.3184 14.6598C21.5941 14.7883 21.7716 14.968 21.8508 15.1987C21.9301 15.4294 21.9028 15.6883 21.7689 15.9753L21.3416 16.8919L21.3757 16.9078L23.1815 15.9956C23.3628 15.9037 23.5143 15.8533 23.6361 15.8443C23.7621 15.8339 23.8961 15.8618 24.0382 15.928C24.2542 16.0288 24.4065 16.1845 24.495 16.3954C24.5864 16.6075 24.5864 16.8116 24.4949 17.0077C24.3995 17.2123 24.2568 17.3551 24.0668 17.4361L22.6749 18.017L23.1071 19.8171C23.1626 20.054 23.1454 20.2691 23.0552 20.4624C22.9452 20.6983 22.7771 20.8586 22.5507 20.9434C22.3257 21.0253 22.0966 21.0119 21.8636 20.9032C21.6874 20.821 21.5548 20.7159 21.4657 20.5879C21.3795 20.4612 21.3109 20.2891 21.2601 20.0716L20.8151 18.1099L20.781 18.094L20.3198 19.083C20.1859 19.3701 20.0052 19.5574 19.7775 19.645ZM24.0407 21.8354C23.7536 21.7015 23.5571 21.5182 23.4512 21.2854C23.3465 21.0498 23.3479 20.8168 23.4552 20.5866C23.5427 20.3991 23.6578 20.2746 23.8007 20.2132C23.9463 20.1531 24.103 20.1621 24.2707 20.2403L24.2749 20.2423C24.4284 20.3138 24.5714 20.2854 24.704 20.1569C24.8394 20.0297 25.0177 19.7513 25.2388 19.3216L25.8801 18.0688C26.0333 17.77 26.2243 17.5754 26.4533 17.485C26.6837 17.3917 26.9409 17.4113 27.2251 17.5439L29.4845 18.5974C29.7716 18.7313 29.9548 18.9171 30.0343 19.1548C30.1166 19.3939 30.0875 19.664 29.947 19.9653L28.5654 22.928C28.4316 23.2151 28.2508 23.4024 28.0231 23.49C27.7996 23.5761 27.5486 23.5542 27.2701 23.4243C26.9916 23.2944 26.812 23.1155 26.7314 22.8877C26.655 22.6583 26.6837 22.4001 26.8176 22.113L28.0481 19.4742L27.2381 19.0965L26.5741 20.3646C26.1954 21.0877 25.7976 21.5699 25.3805 21.8114C24.9676 22.0513 24.521 22.0593 24.0407 21.8354ZM30.1793 24.7341C29.7416 24.5301 29.4308 24.2208 29.2469 23.8064C29.0644 23.3891 29.0699 22.973 29.2633 22.558C29.4727 22.109 29.8007 21.8398 30.2472 21.7504C30.6978 21.6596 31.2493 21.742 31.9016 21.9977L32.9631 22.4149L33.0704 22.1847C33.142 22.0312 33.1451 21.8873 33.0797 21.753C33.0143 21.6187 32.8977 21.5125 32.7301 21.4343C32.5965 21.372 32.4715 21.3432 32.3552 21.3477C32.2402 21.3495 32.0735 21.3842 31.8551 21.4519C31.563 21.544 31.2905 21.5311 31.0376 21.4132C30.8301 21.3165 30.6861 21.1801 30.6055 21.0041C30.5291 20.8266 30.5334 20.647 30.6182 20.4651C30.6632 20.3684 30.715 20.2871 30.7735 20.2209C31.0021 19.9608 31.3473 19.8363 31.8092 19.8475C32.2752 19.8572 32.801 19.9986 33.3864 20.2716C34.0372 20.5751 34.4934 20.9695 34.755 21.4547C35.0179 21.9371 35.038 22.4171 34.8154 22.8945L33.6743 25.3415C33.5378 25.6342 33.357 25.818 33.1318 25.8929C32.9079 25.965 32.6638 25.9394 32.3994 25.8161C32.1607 25.7048 31.996 25.5536 31.9052 25.3625C31.8144 25.1714 31.8138 24.9462 31.9035 24.687L31.8694 24.6711C31.6467 24.8371 31.3804 24.9223 31.0704 24.9265C30.7634 24.9321 30.4663 24.868 30.1793 24.7341ZM31.3762 23.8702C31.578 23.9643 31.7766 23.9947 31.9721 23.9613C32.1689 23.925 32.3064 23.8231 32.3846 23.6554L32.5277 23.3485L31.7621 23.0537C31.592 22.9882 31.4442 22.9712 31.3188 23.0027C31.1934 23.0342 31.1035 23.1082 31.0492 23.2247C30.9909 23.3498 30.9914 23.4711 31.0507 23.5887C31.1114 23.7035 31.2199 23.7973 31.3762 23.8702ZM34.6683 26.8742C34.4183 26.7575 34.2553 26.595 34.1794 26.3867C34.1078 26.1768 34.1322 25.9425 34.2528 25.6839L35.5946 22.8064C35.7656 22.4398 36.02 22.1986 36.3577 22.0827C36.6954 21.9669 37.0576 21.9991 37.4441 22.1793C37.7993 22.3449 38.0456 22.5515 38.1828 22.7988C38.32 23.0462 38.3638 23.3642 38.3141 23.7527L38.0759 25.6657L38.1058 25.6797L39.4097 24.2636C39.6754 23.9758 39.9471 23.8049 40.2248 23.751C40.5025 23.6971 40.8189 23.753 41.1742 23.9187C41.5607 24.0989 41.8181 24.3556 41.9465 24.6888C42.0748 25.022 42.0535 25.3719 41.8826 25.7385L40.5427 28.6118C40.4208 28.8732 40.2564 29.044 40.0496 29.124C39.8441 29.2011 39.612 29.1794 39.3534 29.0588C39.1033 28.9422 38.9417 28.7804 38.8687 28.5733C38.7971 28.3635 38.8215 28.1292 38.9421 27.8706L39.9937 25.6155L39.9596 25.5996L38.2782 27.2911C38.1143 27.4569 37.9495 27.5582 37.7835 27.595C37.6176 27.6318 37.4352 27.6038 37.2362 27.5111C37.0344 27.417 36.8922 27.2953 36.8096 27.146C36.7298 26.9981 36.7006 26.8046 36.7222 26.5655L36.9371 24.1902L36.9073 24.1762L35.8577 26.4271C35.7358 26.6886 35.5714 26.8593 35.3646 26.9393C35.159 27.0165 34.927 26.9947 34.6683 26.8742ZM42.1944 30.3369C41.7567 30.1328 41.4459 29.8235 41.262 29.4091C41.0795 28.9918 41.085 28.5757 41.2784 28.1608C41.4878 27.7117 41.8158 27.4425 42.2622 27.3532C42.7129 27.2623 43.2644 27.3447 43.9167 27.6005L44.9782 28.0176L45.0855 27.7874C45.1571 27.6339 45.1602 27.49 45.0948 27.3557C45.0294 27.2215 44.9128 27.1152 44.7452 27.037C44.6116 26.9747 44.4866 26.9459 44.3703 26.9505C44.2553 26.9522 44.0886 26.9869 43.8702 27.0546C43.5781 27.1468 43.3056 27.1339 43.0527 27.0159C42.8452 26.9192 42.7012 26.7828 42.6206 26.6069C42.5442 26.4294 42.5485 26.2497 42.6333 26.0678C42.6783 25.9712 42.7301 25.8898 42.7886 25.8237C43.0172 25.5635 43.3624 25.439 43.8243 25.4503C44.2903 25.46 44.8161 25.6013 45.4015 25.8743C46.0523 26.1778 46.5085 26.5722 46.7701 27.0575C47.033 27.5399 47.0531 28.0198 46.8305 28.4973L45.6894 30.9442C45.5529 31.237 45.3721 31.4208 45.1468 31.4957C44.923 31.5677 44.6788 31.5421 44.4145 31.4189C44.1758 31.3076 44.0111 31.1563 43.9203 30.9652C43.8295 30.7741 43.8289 30.5489 43.9186 30.2898L43.8845 30.2739C43.6618 30.4399 43.3955 30.525 43.0855 30.5293C42.7785 30.5349 42.4814 30.4707 42.1944 30.3369ZM43.3913 29.473C43.5931 29.5671 43.7917 29.5974 43.9872 29.564C44.184 29.5278 44.3215 29.4258 44.3997 29.2581L44.5428 28.9512L43.7772 28.6565C43.6071 28.591 43.4593 28.574 43.3339 28.6054C43.2085 28.6369 43.1186 28.7109 43.0643 28.8274C43.006 28.9525 43.0065 29.0738 43.0658 29.1915C43.1265 29.3062 43.235 29.4001 43.3913 29.473Z"
            fill="url(#paint0_linear_2343_2785)"/>
    </g>
    <rect x="6.62097" y="-0.162257" width="55.202" height="18.0643" rx="6.10101"
          transform="rotate(25 6.62097 -0.162257)" stroke="url(#paint1_linear_2343_2785)" stroke-width="1.92663"/>
    <defs>
        <linearGradient id="paint0_linear_2343_2785" x1="-11.1528" y1="1.51583" x2="-15.092" y2="22.4623"
                        gradientUnits="userSpaceOnUse">
            <stop stop-color="#FFB73D"/>
            <stop offset="1" stop-color="#FFA000"/>
        </linearGradient>
        <linearGradient id="paint1_linear_2343_2785" x1="-19.5508" y1="9.18676" x2="-10.5959" y2="38.7496"
                        gradientUnits="userSpaceOnUse">
            <stop stop-color="#FFB73D"/>
            <stop offset="1" stop-color="#FFA000"/>
        </linearGradient>
        <clipPath id="clip0_2343_2785">
            <rect x="7.08691" y="1.11792" width="53.2754" height="16.1377" rx="5.13769"
                  transform="rotate(25 7.08691 1.11792)" fill="white"/>
        </clipPath>
    </defs>
</svg>;

export class Alabuga extends PureComponent {

    constructor(props) {
        super(props);

        const data = [
            [
                'Учишься в 9-11 классе?',
                'Сейчас есть возможность поступить в самый топовый колледж страны. Там готовят инженеров, ИТ-специалистов, экономистов юристов и других востребованных спецов. Никаких экзаменов, для поступления нужно сыграть в игру. Посмотри, найдешь для себя интересненькое',
                'Посмотреть'
            ],
            [
                'Любишь играть в игры?',
                'Похоже, у тебя все хорошо с аналитикой и общением. Попробуешь пройти еще одну игру Business cats? Заодно сможешь поступить в топовый колледж страны. Там дуальная система: работа+обучение, и зарплата до 70 000 с первого курса',
                'Пройти'
            ],
            [
                'Привет!',
                'Уже выбрал, куда поступать? Посмотри на «Алабуга Политех», туда мечтают попасть девушки и парни со всей России. Все потому, что там супер условия, прогрессивное современное обучение и возможность зарабатывать до 70 тыс в месяц с первого курса. Поступать можно после 9-11 классов, никаких экзаменов, нужно только сыграть в игру.',
                'Попробовать'
            ]
        ];
        const randomData = data[getRandomInt(0, data.length - 1)];
        this.state = {
            title: randomData[0],
            description: randomData[1],
            button: randomData[2]
        };

        this.back = this.back.bind(this);
    }

    componentDidMount() {
        this.props.t.socket.call('advert.show', {t: 'alabuga_test'});
    }

    async back() {
        const lastPanel = this.props.t.state.history[this.props.t.state.history.length - 2];
        const needCheckHash = ['main', 'group_vk'].indexOf(lastPanel) > -1;
        await this.props.t.back();
        if (needCheckHash) {
            this.props.t.onChangeHash();
        }
    }

    render() {
        const {t} = this.props;
        const {title, description, button} = this.state;

        return (
            <div className='AdvertIntegration'>
                <img
                    alt='logo'
                    src={getSrcUrl(require(`../../assets/drawing/icons/alabuga/logo_${t.state.appearance === 'light' ? 'day' : 'night'}.png`))}
                    width={234.77} height={72.6}
                />
                <div className='Titles'>
                    <h1>{title}</h1>
                    <h3>{description}</h3>
                </div>
                <div className='Buttons'>
                    <Button
                        size='m'
                        mode={'gradient_gray'}
                        onClick={() => {
                            this.props.t.socket.call('advert.click', {t: 'alabuga_test'});
                            this.back();
                            openUrl('https://vk.cc/couGfG');
                        }}
                    >
                        {button}
                    </Button>
                    <Button
                        size='m'
                        mode='secondary'
                        onClick={() => {
                            this.props.t.socket.call('advert.back', {t: 'alabuga_test'});
                            this.back();
                        }}
                    >
                        Назад
                    </Button>
                </div>
                <img
                    alt='background'
                    className='Background'
                    src={getSrcUrl(require(`../../assets/drawing/icons/alabuga/bg_${isDesktop ? 'desktop' : 'mobile'}.png`))}
                />
            </div>
        )
    }
}

Alabuga.defaultProps = {};

Alabuga.propTypes = {
    t: PropTypes.object
};

export class OprosStartGameRSV extends PureComponent {

    constructor(props) {
        super(props);
        this.back = this.back.bind(this);

        this.adv_name = 'opros_startgame_rsv';
    }

    componentDidMount() {
        this.props.t.socket.call('advert.show', {t: this.adv_name});
    }

    async back() {
        const lastPanel = this.props.t.state.history[this.props.t.state.history.length - 2];
        const needCheckHash = ['main', 'group_vk'].indexOf(lastPanel) > -1;
        await this.props.t.back();
        if (needCheckHash) {
            this.props.t.onChangeHash();
        }
    }

    render() {
        const {t} = this.props;

        return (
            <div className='AdvertIntegration'>
                <div className='Titles'>
                    <div>
                        <h1 style={{color: '#FFFFFF'}}>
                            Стикерпак за опрос
                        </h1>
                        {AdvertMark}
                    </div>
                    <h3 style={{color: '#A4A6AA'}}>
                        Открой для себя мир видеоигр по-новому: проходи квесты, повышай свой уровень и обучайся самым
                        востребованным направлениям 2023. Узнай, какая профессия тебе подойдет.
                    </h3>
                </div>
                <div className='Buttons'>
                    <Button
                        size='m'
                        mode={'gradient_gray'}
                        onClick={() => {
                            this.props.t.socket.call('advert.click', {t: this.adv_name});
                            this.back();
                            openUrl('https://vk.com/app5619682_-214215690#691835_app_narisovano11');
                        }}
                    >
                        Пройти опрос
                    </Button>
                    <Button
                        size='m'
                        mode='secondary'
                        onClick={() => {
                            this.props.t.socket.call('advert.back', {t: this.adv_name});
                            this.back();
                        }}
                    >
                        Назад
                    </Button>
                </div>
                <img
                    style={!isDesktop ? {
                        width: 'auto',
                        left: '-50%'
                    } : {}}
                    alt='background'
                    className='Background'
                    src={getSrcUrl(require(`../../assets/drawing/icons/opros_startgame_rsv/bg.png`))}
                />
            </div>
        )
    }
}

OprosStartGameRSV.defaultProps = {};

OprosStartGameRSV.propTypes = {
    t: PropTypes.object
};